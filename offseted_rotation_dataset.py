# -*- coding: utf-8 -*-
"""Offseted_Rotation_Dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n_PE3nO_6veZiqhpnYZyGRZyaTgnEZ3s

## ***Loading demo folders from Google Drive***
"""

from google.colab import drive
drive.mount('/content/drive')

import os

# Getting Demo
GOOGLE_DRIVE_PATH_AFTER_MYDRIVE = 'SPOT'
ORIGINAL_DEMO_PATH = os.path.join('drive', 'My Drive', GOOGLE_DRIVE_PATH_AFTER_MYDRIVE)
demo_folders = os.listdir(ORIGINAL_DEMO_PATH)

print(demo_folders)

"""## ***Train and Test Dataset Creation***"""

import random
import os
import shutil
import numpy as np

# Setup Destination
DATASET_INITIAL_PATH = os.getcwd() + '/dataset_mixed/'
TRAIN_PATH = os.path.join(DATASET_INITIAL_PATH, 'train/')
TEST_PATH = os.path.join(DATASET_INITIAL_PATH, 'test/')

if not os.path.exists(DATASET_INITIAL_PATH):
    os.mkdir(DATASET_INITIAL_PATH)

if not os.path.exists(TRAIN_PATH):
    os.mkdir(TRAIN_PATH)

if not os.path.exists(TEST_PATH):
    os.mkdir(TEST_PATH)


train_labels = []
train_index = 0

test_labels = []
test_index = 0


demo_folders = os.listdir(ORIGINAL_DEMO_PATH)

for folder in demo_folders:
    folder_path = os.path.join(ORIGINAL_DEMO_PATH, folder)
    data_number = len(os.listdir(folder_path)) - 1
    train_number = int(data_number * 0.9)

    labels_path = os.path.join(folder_path, 'labels.npy')
    labels = np.load(labels_path)

    order = list(range(data_number))
    random.shuffle(order)

    for i in range(train_number):
        index = order[i]

        folder_name = os.path.join(folder_path, format(index, '05d'))
        new_folder_name = os.path.join(TRAIN_PATH, 'temp', format(train_index, '05d'))
        shutil.copytree(folder_name, new_folder_name)

        train_labels.append(labels[index])
        train_index += 1

    for i in range(train_number, data_number):
        index = order[i]

        folder_name = os.path.join(folder_path, format(index, '05d'))
        new_folder_name = os.path.join(TEST_PATH, 'temp', format(test_index, '05d'))
        shutil.copytree(folder_name, new_folder_name)

        test_labels.append(labels[index])
        test_index += 1

np.save(os.path.join(TRAIN_PATH, 'temp', 'labels.npy'), train_labels)
np.save(os.path.join(TEST_PATH, 'temp', 'labels.npy'), test_labels)

# Shuffle the order inside the training folder
data_number_train = len(os.listdir(os.path.join(TRAIN_PATH, 'temp'))) - 1
train_order = list(range(data_number_train))
random.shuffle(train_order)

train_labels = []
labels = np.load(os.path.join(TRAIN_PATH, 'temp', 'labels.npy'))

for i in range(data_number_train):
    index = train_order[i]

    folder_name = os.path.join(TRAIN_PATH, 'temp', format(index, '05d'))
    new_folder_name = os.path.join(TRAIN_PATH, format(i, '05d'))
    os.rename(folder_name, new_folder_name)

    train_labels.append(labels[index])

np.save(os.path.join(TRAIN_PATH, 'labels.npy'), train_labels)

# Shuffle the order inside the test folder
data_number_test = len(os.listdir(os.path.join(TEST_PATH, 'temp'))) - 1
test_order = list(range(data_number_test))
random.shuffle(test_order)

test_labels = []
labels = np.load(os.path.join(TEST_PATH, 'temp', 'labels.npy'))

for i in range(data_number_test):
    index = test_order[i]

    folder_name = os.path.join(TEST_PATH, 'temp', format(index, '05d'))
    new_folder_name = os.path.join(TEST_PATH, format(i, '05d'))
    os.rename(folder_name, new_folder_name)
    test_labels.append(labels[index])

np.save(os.path.join(TEST_PATH, 'labels.npy'), test_labels)

shutil.rmtree(os.path.join(TRAIN_PATH, 'temp'))
shutil.rmtree(os.path.join(TEST_PATH, 'temp'))

"""## ***Loading Data into Pytorch***"""

import os
import torch
from torch.utils.data import Dataset
from PIL import Image
import numpy as np

class SPOTDataset(Dataset):
    def __init__(self, root_dir, goal_folder, labels_file, transform=None):
        self.root_dir = root_dir
        self.goal_folder = goal_folder
        self.transform = transform
        self.labels = np.load(labels_file)
        self.folder_names = sorted(os.listdir(root_dir))
        if goal_folder in self.folder_names:
            self.folder_names.remove(goal_folder)

    def __len__(self):
        return len(self.folder_names)

    def __getitem__(self, idx):
        folder_name = self.folder_names[idx]
        folder_path = os.path.join(self.root_dir, folder_name)

        input_images = []
        for i in range(5):
            input_image_path = os.path.join(folder_path, f"{i}.png")
            image = Image.open(input_image_path).convert('RGB')
            if self.transform:
                image = self.transform(image)
            input_images.append(image)

        goal_images = []
        goal_folder_path = os.path.join(self.root_dir, self.goal_folder)
        for i in range(5):
            goal_image_path = os.path.join(goal_folder_path, f"{i}.png")
            image = Image.open(goal_image_path).convert('RGB')
            if self.transform:
                image = self.transform(image)
            goal_images.append(image)

        input_images = torch.stack(input_images, dim=0)
        goal_images = torch.stack(goal_images, dim=0)

        label = self.labels[idx]

        return (input_images, goal_images), label

from torchvision import transforms
from torch.utils.data import DataLoader

data_transforms = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])

goal_folder = '00179'
train_dataset = SPOTDataset(root_dir=TRAIN_PATH, goal_folder=goal_folder, labels_file=os.path.join(TRAIN_PATH, 'labels.npy'), transform=data_transforms)
test_dataset = SPOTDataset(root_dir=TEST_PATH, goal_folder=goal_folder, labels_file=os.path.join(TEST_PATH, 'labels.npy'), transform=data_transforms)

train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True, num_workers=4)
test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False, num_workers=4)

print(f"Number of training samples: {len(train_dataset)}")
print(f"Number of test samples: {len(test_dataset)}\n")


(image_set_input, image_set_goal), label = train_dataset[0]

print(f"Input Image Set Shape: {image_set_input.shape}")  # Shape of input images (5, 3, 224, 224)
print(f"Goal Image Set Shape: {image_set_goal.shape}")  # Shape of goal images (5, 3, 224, 224)
print(f"Label: {label}")  # Print the label