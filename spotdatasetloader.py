# -*- coding: utf-8 -*-
"""SPOTDatasetLoader.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p2dzoPGu-EelxYfBGqw2V9sFvzCiVKsv
"""

import os
import torch
from torch.utils.data import Dataset
from PIL import Image
import numpy as np

class SPOTDataLoader(Dataset):
    def __init__(self, root_dir, goal_folder, labels_file, transform=None):
        self.root_dir = root_dir
        self.goal_folder = goal_folder
        self.transform = transform
        self.labels = np.load(labels_file)

        if torch.cuda.is_available():
            self.cuda = True
        else:
            self.cuda = False

    def __len__(self):
        return self.labels.shape[0]

    def __getitem__(self, idx):
        folder_name = format(idx, '05d')
        folder_path = os.path.join(self.root_dir, folder_name)

        input_images = []
        for i in range(5):
            input_image_path = os.path.join(folder_path, f"{i}.png")
            image = Image.open(input_image_path).convert('RGB')
            if self.transform:
                image = self.transform(image)
            input_images.append(image)

        goal_images = []
        goal_folder_path = os.path.join(self.root_dir, self.goal_folder)
        for i in range(5):
            goal_image_path = os.path.join(goal_folder_path, f"{i}.png")
            image = Image.open(goal_image_path).convert('RGB')
            if self.transform:
                image = self.transform(image)
            goal_images.append(image)

        label = self.labels[idx]

        if self.cuda is True:
            input_images = torch.stack(input_images, dim=0).cuda()
            goal_images = torch.stack(goal_images, dim=0).cuda()
            label_tensor = torch.tensor(label).cuda()
        else:
            input_images = torch.stack(input_images, dim=0)
            goal_images = torch.stack(goal_images, dim=0)
            label_tensor = torch.tensor(label)

        return input_images, goal_images, label_tensor